int64_t (* const)() _init()
{
    if (!__gmon_start__)
        return __gmon_start__;
    
    return __gmon_start__();
}

int64_t sub_401020()
{
    int64_t var_8 = data_405008;
    /* jump -> data_405010 */
}

int64_t png_write_info()
{
    /* tailcall */
    return png_write_info();
}

int64_t sub_401036()
{
    int64_t var_8 = 0;
    /* tailcall */
    return sub_401020();
}

void free(void* mem)
{
    /* tailcall */
    return free(mem);
}

int64_t sub_401046()
{
    int64_t var_8 = 1;
    /* tailcall */
    return sub_401020();
}

char* strncpy(char* arg1, char const* arg2, uint64_t arg3)
{
    /* tailcall */
    return strncpy(arg1, arg2, arg3);
}

int64_t sub_401056()
{
    int64_t var_8 = 2;
    /* tailcall */
    return sub_401020();
}

char* strcpy(char* arg1, char const* arg2)
{
    /* tailcall */
    return strcpy(arg1, arg2);
}

int64_t sub_401066()
{
    int64_t var_8 = 3;
    /* tailcall */
    return sub_401020();
}

int64_t mkdir()
{
    /* tailcall */
    return mkdir();
}

int64_t sub_401076()
{
    int64_t var_8 = 4;
    /* tailcall */
    return sub_401020();
}

int32_t puts(char const* str)
{
    /* tailcall */
    return puts(str);
}

int64_t sub_401086()
{
    int64_t var_8 = 5;
    /* tailcall */
    return sub_401020();
}

uint64_t fread(void* buf, uint64_t size, uint64_t count, FILE* fp)
{
    /* tailcall */
    return fread(buf, size, count, fp);
}

int64_t sub_401096()
{
    int64_t var_8 = 6;
    /* tailcall */
    return sub_401020();
}

int32_t fclose(FILE* fp)
{
    /* tailcall */
    return fclose(fp);
}

int64_t sub_4010a6()
{
    int64_t var_8 = 7;
    /* tailcall */
    return sub_401020();
}

int64_t png_write_image()
{
    /* tailcall */
    return png_write_image();
}

int64_t sub_4010b6()
{
    int64_t var_8 = 8;
    /* tailcall */
    return sub_401020();
}

char* stpcpy(char* arg1, char const* arg2)
{
    /* tailcall */
    return stpcpy(arg1, arg2);
}

int64_t sub_4010c6()
{
    int64_t var_8 = 9;
    /* tailcall */
    return sub_401020();
}

uint64_t strlen(char const* arg1)
{
    /* tailcall */
    return strlen(arg1);
}

int64_t sub_4010d6()
{
    int64_t var_8 = 0xa;
    /* tailcall */
    return sub_401020();
}

int32_t printf(char const* format, ...)
{
    /* tailcall */
    return printf();
}

int64_t sub_4010e6()
{
    int64_t var_8 = 0xb;
    /* tailcall */
    return sub_401020();
}

char* strrchr(char const* arg1, int32_t arg2)
{
    /* tailcall */
    return strrchr(arg1, arg2);
}

int64_t sub_4010f6()
{
    int64_t var_8 = 0xc;
    /* tailcall */
    return sub_401020();
}

int64_t png_get_rowbytes()
{
    /* tailcall */
    return png_get_rowbytes();
}

int64_t sub_401106()
{
    int64_t var_8 = 0xd;
    /* tailcall */
    return sub_401020();
}

char* strncat(char* arg1, char const* arg2, uint64_t arg3)
{
    /* tailcall */
    return strncat(arg1, arg2, arg3);
}

int64_t sub_401116()
{
    int64_t var_8 = 0xe;
    /* tailcall */
    return sub_401020();
}

int64_t png_write_end()
{
    /* tailcall */
    return png_write_end();
}

int64_t sub_401126()
{
    int64_t var_8 = 0xf;
    /* tailcall */
    return sub_401020();
}

int64_t ftell(FILE* fp)
{
    /* tailcall */
    return ftell(fp);
}

int64_t sub_401136()
{
    int64_t var_8 = 0x10;
    /* tailcall */
    return sub_401020();
}

int64_t png_create_info_struct()
{
    /* tailcall */
    return png_create_info_struct();
}

int64_t sub_401146()
{
    int64_t var_8 = 0x11;
    /* tailcall */
    return sub_401020();
}

int64_t malloc(uint64_t bytes)
{
    /* tailcall */
    return malloc(bytes);
}

int64_t sub_401156()
{
    int64_t var_8 = 0x12;
    /* tailcall */
    return sub_401020();
}

int32_t fseek(FILE* fp, int64_t offset, int32_t whence)
{
    /* tailcall */
    return fseek(fp, offset, whence);
}

int64_t sub_401166()
{
    int64_t var_8 = 0x13;
    /* tailcall */
    return sub_401020();
}

int64_t png_init_io()
{
    /* tailcall */
    return png_init_io();
}

int64_t sub_401176()
{
    int64_t var_8 = 0x14;
    /* tailcall */
    return sub_401020();
}

FILE* fopen(char const* filename, char const* mode)
{
    /* tailcall */
    return fopen(filename, mode);
}

int64_t sub_401186()
{
    int64_t var_8 = 0x15;
    /* tailcall */
    return sub_401020();
}

int64_t png_create_write_struct()
{
    /* tailcall */
    return png_create_write_struct();
}

int64_t sub_401196()
{
    int64_t var_8 = 0x16;
    /* tailcall */
    return sub_401020();
}

char* strcat(char* arg1, char const* arg2)
{
    /* tailcall */
    return strcat(arg1, arg2);
}

int64_t sub_4011a6()
{
    int64_t var_8 = 0x17;
    /* tailcall */
    return sub_401020();
}

int32_t sprintf(char* s, char const* format, ...)
{
    /* tailcall */
    return sprintf();
}

int64_t sub_4011b6()
{
    int64_t var_8 = 0x18;
    /* tailcall */
    return sub_401020();
}

uint64_t fwrite(void const* buf, uint64_t size, uint64_t count, FILE* fp)
{
    /* tailcall */
    return fwrite(buf, size, count, fp);
}

int64_t sub_4011c6()
{
    int64_t var_8 = 0x19;
    /* tailcall */
    return sub_401020();
}

int64_t png_set_IHDR()
{
    /* tailcall */
    return png_set_IHDR();
}

int64_t sub_4011d6()
{
    int64_t var_8 = 0x1a;
    /* tailcall */
    return sub_401020();
}

int32_t main(int32_t argc, char** argv, char** envp)
{
    printf("HK89 dial decompressor %s\n", "v1.8");
    int64_t rax_1 = malloc(0x12c000);
    data_405120 = rax_1;
    
    if (!rax_1)
    {
        printf("Unable to reserve %d byte memory…");
        return 0;
    }
    
    data_538c30 = 0x12c000;
    
    if (argc <= 1)
    {
        puts("No .bin filename specified!");
        free(data_405120);
        return 0;
    }
    
    char* filename = argv[1];
    data_538c20 = filename;
    FILE* fp = fopen(filename, "rb");
    
    if (!fp)
    {
        printf("No such file! (%s)\n", data_538c20);
        return 0;
    }
    
    int32_t rax_2 = sub_4014e0(fp);
    int32_t rsi = data_538c30;
    
    if (rsi < rax_2)
    {
        printf("File too large (>%d Byte)\n", rsi);
        free(data_405120);
        return 0;
    }
    
    fread(data_405120, rax_2, 1, fp);
    fclose(fp);
    sub_401520(data_538c20);
    data_538d5a = *(data_405120 + 2);
    sub_402cc0(rax_2);
    free(data_405120);
    return 1;
}

void _start(int64_t arg1, int64_t arg2, void (* arg3)()) __noreturn
{
    int64_t stack_end_1;
    int64_t stack_end = stack_end_1;
    void ubp_av;
    __libc_start_main(main, __return_addr, &ubp_av, init, fini, arg3, &stack_end);
    /* no return */
}

int64_t sub_401350() __pure
{
    return;
}

int64_t deregister_tm_clones()
{
    return 0x4050f8;
}

int64_t sub_401390()
{
    return 0;
}

void _FINI_0()
{
    if (data_405100)
        return;
    
    deregister_tm_clones();
    data_405100 = 1;
}

int64_t _INIT_0()
{
    /* tailcall */
    return sub_401390();
}

uint32_t sub_401410(void* arg1)
{
    uint32_t result = data_405104;
    
    if (!result)
    {
        data_405104 = 1;
        data_538c3c = *(arg1 + 0xc);
        data_538c34 = *(arg1 + 0x10);
        data_538c1c = *(arg1 + 8);
        result = *(arg1 + 0xa);
        data_538c2c = result;
    }
    
    return result;
}

int64_t sub_401450() __pure
{
    return;
}

int32_t sub_401460(void* arg1)
{
    int32_t result = data_405108;
    
    if (!result)
    {
        data_405108 = 1;
        data_538c28 = *(arg1 + 0xc);
        data_538c4c = *(arg1 + 0x10);
        data_538c48 = *(arg1 + 8);
        result = *(arg1 + 0xa);
        data_538c38 = result;
    }
    
    return result;
}

int64_t sub_4014a0(void* arg1, char* arg2)
{
    /* tailcall */
    return sprintf(arg2, &data_403010, *(arg1 + 1) & 0x7f, *(arg1 + 3) * 5 * 2);
}

int64_t sub_4014d0() __pure
{
    return;
}

uint64_t sub_4014e0(FILE* arg1)
{
    fseek(arg1, 0, 2);
    int32_t rax = ftell(arg1);
    fseek(arg1, 0, 0);
    return rax;
}

int64_t sub_401520(char* arg1)
{
    char var_108[0x100];
    strncpy(&var_108, u"_…", 0xf6);
    strncat(&var_108, arg1, 0xf6);
    *strrchr(&var_108, 0x2e) = 0;
    strcpy(&data_538b20, &var_108);
    return mkdir(&var_108, 0x1ff);
}

int64_t sub_401580(int32_t* arg1)
{
    int32_t result = *arg1;
    
    if (result <= 0)
        return result;
    
    *arg1 = result - 1;
    return result - 1;
}

int64_t sub_4015a0(char* arg1, char* arg2, char* arg3, uint8_t* arg4)
{
    uint16_t rax_2 = arg1[1] | *arg1 << 8;
    uint32_t rdx_1 = rax_2;
    *arg2 = *rax_2[1] & 0xf8;
    char result = rdx_1 >> 3 & 0xfc;
    *arg3 = result;
    *arg4 = rdx_1 << 3;
    return result;
}

void sub_4015d0(int64_t arg1, void* arg2, int64_t arg3, int64_t arg4, int32_t arg5)
{
    if (arg5 <= 0)
        return;
    
    uint64_t rax = arg4 - 1;
    int32_t rsi = 0;
    int32_t rdi = 0;
    int32_t r8 = 0;
    
    do
    {
        if (arg4 > 0)
        {
            int64_t r11_1 = r8;
            void* i = arg2 + r11_1;
            char* rcx_1 = rsi + arg1;
            
            do
            {
                uint32_t rax_2 = rcx_1[1];
                char r10_1 = *rcx_1;
                i += 4;
                rcx_1 = &rcx_1[3];
                uint16_t rax_4 = rcx_1[-1];
                *(i - 1) = r10_1;
                uint16_t rax_5 = rax_4 | rax_2 << 8;
                uint32_t r9_2 = rax_5;
                *(i - 4) = *rax_5[1] & 0xf8;
                *(i - 2) = r9_2 << 3;
                *(i - 3) = r9_2 >> 3 & 0xfc;
            } while (r11_1 + arg2 + (rax << 2) + 4 != i);
            
            r8 = r8 + (rax << 2) + 4;
            rsi += arg4 * 3;
        }
        
        if (rsi & 3)
            rsi = (rsi & 0xfffffffc) + 4;
        
        rdi += 1;
    } while (arg5 != rdi);
}

uint64_t sub_4016b0(int16_t* arg1, char* arg2, int32_t* arg3, int32_t arg4, int32_t arg5, int32_t arg6, uint64_t arg7 @ r15, int32_t arg8)
{
    uint64_t var_8 = arg7;
    int32_t rbx = 0;
    uint32_t r12 = *arg1;
    int32_t var_58 = 0;
    
    if (arg5 > 0)
    {
        do
        {
            uint64_t r10_1 = 0;
            
            if (arg4 > 0)
            {
                do
                {
                    uint32_t rsi = r12 + 1;
                    uint32_t rdi = *(arg1 + r12);
                    void* rcx_1 = rsi + arg1;
                    char temp0_1 = rdi;
                    uint32_t rdx;
                    
                    if (!temp0_1)
                    {
                        if (arg8)
                        {
                            puts("cnt=0 , exiting...");
                            rdi = 1;
                            r10_1 = r10_1;
                            rdx = *rcx_1;
                        }
                        else
                        {
                            rdx = *rcx_1;
                            rdi = 1;
                        }
                        
                        goto label_401732;
                    }
                    
                    rdx = *rcx_1;
                    
                    if (temp0_1 >= 0)
                    {
                        label_401732:
                        r12 = rsi;
                        int32_t rcx_2 = rbx;
                        int32_t rsi_1 = 0;
                        
                        while (true)
                        {
                            uint32_t rax_3;
                            char* r8_2;
                            
                            if (!arg6)
                            {
                                rax_3 = rdx;
                                r8_2 = r12 + arg1;
                            }
                            else
                            {
                                r12 += 1;
                                arg7 = rdx;
                                r8_2 = r12 + arg1;
                                rax_3 = *r8_2;
                            }
                            
                            r12 += 2;
                            uint16_t rax_5 = rax_3 << 8 | r8_2[1];
                            uint32_t rdx_2 = rax_5;
                            arg2[rbx] = *rax_5[1] & 0xf8;
                            int64_t rax_9 = rbx + 1;
                            rbx += 3;
                            arg2[rax_9] = rdx_2 >> 3 & 0xfc;
                            arg2[rcx_2 + 2] = rdx_2 << 3;
                            
                            if (arg6)
                            {
                                arg2[rbx] = arg7;
                                rbx = rcx_2 + 4;
                            }
                            
                            rsi_1 += 1;
                            
                            if (rsi_1 == rdi)
                                break;
                            
                            rcx_2 = rbx;
                            rdx = *(arg1 + r12);
                        }
                        
                        r10_1 = r10_1 + rsi_1;
                        
                        if (arg8)
                        {
                            printf("unique: cnt=%d j=%d i=%d\n", rsi_1, var_58, r10_1);
                            r10_1 = r10_1;
                        }
                    }
                    else
                    {
                        char rdi_1 = rdi & 0x7f;
                        
                        if (arg6)
                        {
                            rsi = r12 + 2;
                            arg7 = rdx;
                            rcx_1 = rsi + arg1;
                            rdx = *rcx_1;
                        }
                        
                        r12 = rsi + 2;
                        uint32_t rsi_2 = rdi_1;
                        uint16_t rdx_6 = rdx << 8 | *(rcx_1 + 1);
                        uint32_t r8_8 = rdx_6;
                        
                        if (rdi_1)
                        {
                            int32_t rcx_4 = 0;
                            
                            while (true)
                            {
                                arg2[rbx] = *rdx_6[1] & 0xf8;
                                arg2[rbx + 1] = r8_8 >> 3 & 0xfc;
                                arg2[rbx + 2] = (r8_8 << 3);
                                
                                if (arg6)
                                {
                                    int64_t rdi_2 = rbx + 3;
                                    rcx_4 += 1;
                                    rbx += 4;
                                    arg2[rdi_2] = arg7;
                                    
                                    if (rcx_4 == rsi_2)
                                        break;
                                }
                                else
                                {
                                    rcx_4 += 1;
                                    rbx += 3;
                                    
                                    if (rcx_4 == rsi_2)
                                        break;
                                }
                            }
                        }
                        
                        r10_1 = r10_1 + rsi_2;
                        
                        if (arg8)
                        {
                            uint64_t var_70_1 = r10_1;
                            uint64_t var_78_1 = var_58;
                            printf("ism   : cnt=%d r=%d g=%d b=%d a=…");
                            r10_1 = r10_1;
                        }
                    }
                } while (arg4 > r10_1);
            }
            
            var_58 += 1;
        } while (arg5 != var_58);
    }
    
    *arg3 = rbx;
    int32_t r12_1 = r12 + 1;
    
    if (r12_1 & 3)
        r12_1 += 2;
    
    return r12_1;
}

int64_t sub_401980(int64_t arg1, int32_t arg2, char* arg3)
{
    FILE* fp = fopen(arg3, "wb");
    fwrite(arg1, arg2, 1, fp);
    /* tailcall */
    return fclose(fp);
}

char* sub_4019c0(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5)
{
    uint64_t rbx = arg3;
    char* result = malloc(0x13a600);
    char* result_2 = result;
    *result = 0;
    
    if (arg5 > 0)
    {
        void* const rax_1 = &data_4032bf;
        int32_t var_2088_1 = 0;
        
        if (arg4)
            rax_1 = "RGBA";
        
        int32_t rbx_1 = 0;
        int32_t var_20a0_1 = 0;
        int32_t var_20ac_1 = 0;
        int32_t result_1 = 0;
        
        while (true)
        {
            if (rbx_1 & 3)
                rbx_1 += 2;
            
            int32_t r13_1 = (rbx << 2) + rbx_1;
            char format[0x2008];
            strcat(result_2, &format);
            printf(&format);
            
            if (arg3 > 0)
            {
                int64_t var_20a8_1 = 0;
                void* rax_8 = arg1 + rbx_1;
                
                while (true)
                {
                    format[0] = 0;
                    int32_t var_2098_1 = 0;
                    int32_t var_209c_1;
                    int32_t var_207c_1;
                    char s[0x40];
                    uint64_t rbx_3;
                    int32_t r15_1;
                    
                    if (arg2 <= 0)
                    {
                        var_207c_1 = 0;
                        rbx_3 = 0;
                        r15_1 = 0;
                        var_209c_1 = 0;
                    }
                    else
                    {
                        rbx_3 = 0;
                        r15_1 = 0;
                        var_209c_1 = 0;
                        var_207c_1 = 0;
                        int32_t r14_2 = r13_1;
                        
                        while (true)
                        {
                            int32_t r12_1 = r14_2 + 1;
                            uint32_t rdx_1 = *(arg1 + r14_2);
                            int32_t rax_14 = rdx_1 & 0x7f;
                            
                            if (!rax_14)
                            {
                                r13_1 = r12_1;
                                sprintf(&s, "counter 0 error at line:%d pix:%…", var_20a8_1, r15_1, 
                                    rax_1);
                                strcat(&format, &s);
                                break;
                            }
                            
                            if (rdx_1 < 0)
                            {
                                uint32_t r8 = rax_14;
                                var_2088_1 += 1;
                                rbx_3 = rbx_3 + 1;
                                sprintf(&s, "#%02X, ");
                                strcat(&format, &s);
                                var_207c_1 += r8;
                                
                                if (arg4)
                                    r12_1 = r14_2 + 2;
                                
                                r15_1 += r8;
                                r14_2 = r12_1 + 2;
                                
                                if (r15_1 < arg2)
                                    continue;
                            }
                            else
                            {
                                var_2098_1 += rdx_1;
                                r14_2 = r12_1;
                                var_20a0_1 += rdx_1;
                                var_209c_1 += 1;
                                var_20ac_1 += 1;
                                sprintf(&s, "#%02X, ");
                                strcat(&format, &s);
                                char i_3 = rdx_1;
                                r15_1 += rdx_1;
                                char i;
                                
                                do
                                {
                                    r14_2 = r14_2 + 1 + 2;
                                    i = i_3;
                                    i_3 -= 1;
                                } while (i != 1);
                                
                                if (r15_1 < arg2)
                                    continue;
                            }
                            
                            r13_1 = r14_2;
                            break;
                        }
                    }
                    
                    sprintf(&s, "= %d pixel\n", r15_1);
                    strcat(&format, &s);
                    sprintf(&s, "%02hhX,%02hhX - (%02hhX,%02hhX) …", 
                        *(rax_8 + (var_20a8_1 << 2) + 3), *(rax_8 + (var_20a8_1 << 2) + 2), 
                        var_20ac_1, var_20a0_1, var_2088_1, var_209c_1, rbx_3, var_2098_1, 
                        var_207c_1);
                    char* result_4 = result_2;
                    uint32_t i_1;
                    
                    do
                    {
                        int32_t rdx_6 = *result_4;
                        result_4 = &result_4[4];
                        i_1 = (rdx_6 - 0x1010101) & ~rdx_6 & 0x80808080;
                    } while (!i_1);
                    
                    int32_t temp2_1 = i_1 & 0x8080;
                    
                    if (!temp2_1)
                        i_1 u>>= 0x10;
                    
                    if (!temp2_1)
                        result_4 = &result_4[2];
                    
                    char rbx_4 = i_1;
                    strcpy(stpcpy(result_4 - 3, &s), &format);
                    
                    if (rbx - 1 == var_20a8_1)
                        break;
                    
                    var_20a8_1 += 1;
                }
            }
            
            char* result_3 = result_2;
            uint32_t i_2;
            
            do
            {
                int32_t rcx_6 = *result_3;
                result_3 = &result_3[4];
                i_2 = (rcx_6 - 0x1010101) & ~rcx_6 & 0x80808080;
            } while (!i_2);
            
            int32_t temp0_1 = i_2 & 0x8080;
            
            if (!temp0_1)
                i_2 u>>= 0x10;
            
            if (!temp0_1)
                result_3 = &result_3[2];
            
            char rbx_6 = i_2;
            result_1 += 1;
            *(result_3 - 3) = 0xa;
            result = result_1;
            
            if (arg5 == result)
                break;
            
            rbx_1 = r13_1 + 1;
        }
    }
    
    return result;
}

int64_t sub_401e40(char* arg1, int32_t arg2, int32_t arg3, int32_t arg4, char* arg5)
{
    FILE* rax = fopen(arg1, "wb");
    int64_t rax_1 = png_create_write_struct("1.6.36", 0, 0, 0);
    int64_t rax_2 = png_create_info_struct(rax_1);
    int32_t rax_3 = png_init_io(rax_1, rax);
    png_set_IHDR(rax_1, rax_2, arg2, arg3, 8, ((rax_3 - rax_3) & 0xfffffffc) + 6, 0, 0, 0);
    void* i_3 = malloc(arg3 << 3);
    
    if (arg3 <= 0)
    {
        png_write_info(rax_1, rax_2);
        png_write_image(rax_1, i_3);
        png_write_end(rax_1, 0);
    }
    else
    {
        void* i_2 = i_3;
        int64_t var_48;
        var_48 = rax - rax + 4;
        void* i = i_3;
        
        do
        {
            i += 8;
            *(i - 8) = malloc(png_get_rowbytes(rax_1, rax_2));
        } while (i != i_3 + ((arg3 - 1) << 3) + 8);
        
        int64_t r11_1 = var_48;
        int32_t rdx_2 = 0;
        void* i_1 = i_3;
        
        do
        {
            int64_t rax_9 = 0;
            int32_t rdi_7 = 0;
            
            if (arg2 > 0)
            {
                while (true)
                {
                    (*i_1)[rax_9] = arg5[rdx_2];
                    *(*i_1 + rax_9 + 1) = arg5[rdx_2 + 1];
                    *(*i_1 + rax_9 + 2) = arg5[rdx_2 + 2];
                    
                    if (r11_1 != 4)
                    {
                        rdi_7 += 1;
                        rdx_2 += 3;
                        rax_9 += r11_1;
                        
                        if (arg2 == rdi_7)
                            break;
                    }
                    else
                    {
                        int64_t r8_3 = rdx_2 + 3;
                        rdi_7 += 1;
                        rdx_2 += 4;
                        *(*i_1 + rax_9 + 3) = arg5[r8_3];
                        rax_9 += r11_1;
                        
                        if (arg2 == rdi_7)
                            break;
                    }
                }
            }
            
            i_1 += 8;
        } while (i_1 != i_3 + ((arg3 - 1) << 3) + 8);
        
        png_write_info(rax_1, rax_2, rdx_2, i_1);
        png_write_image(rax_1, i_3);
        png_write_end(rax_1, 0);
        
        do
        {
            int64_t rdi_11 = *i_2;
            i_2 += 8;
            free(rdi_11);
        } while (i_2 != i_3 + ((arg3 - 1) << 3) + 8);
    }
    
    free(i_3);
    /* tailcall */
    return fclose(rax);
}

char* sub_402070(int32_t arg1, int32_t arg2)
{
    char s[0x408];
    int32_t r12;
    
    if (arg2 <= 0)
        r12 = 0;
    else
    {
        int64_t r14_1 = 0;
        r12 = 0;
        
        while (true)
        {
            uint64_t rcx_1 = r14_1;
            int32_t r15_1 = *(((data_538d5a * 5) << 2) + (r14_1 << 2) + data_405120 + 4);
            char const* const rdx_3 = ", ";
            uint64_t r8_1 = r15_1;
            
            if (!(r14_1 & 7))
                rdx_3 = "\n";
            
            if (arg1)
                sprintf(&s, "%s%2d.=%08X", rdx_3, rcx_1, r8_1);
            else
                sprintf(&s, "%s%2d.=%5d byte", rdx_3, rcx_1, r8_1);
            
            r12 += r15_1;
            strncat(data_538c40, &s, 0x8000);
            
            if (arg2 - 1 == r14_1)
                break;
            
            r14_1 += 1;
        }
    }
    
    uint64_t rdx_4 = r12;
    
    if (!arg1)
        sprintf(&s, "\nsumma=%d byte\n", rdx_4);
    else
        sprintf(&s, "\nsumma=0x%X byte\n", rdx_4);
    
    return strncat(data_538c40, &s, 0x8000);
}

uint64_t sub_4021a0(int32_t arg1)
{
    char* rax_3 = data_405120;
    
    if (*rax_3 > arg1)
        return *((arg1 << 2) + rax_3 + rax_3[2] * 0x14 + 4);
    
    puts("Too big index!");
    return 0;
}

uint32_t sub_4021f0(int32_t* arg1, char* arg2)
{
    uint64_t r15 = arg2;
    char s[0x88];
    uint32_t result = strncpy(&s, arg2, 0x14);
    uint32_t r14 = *(arg1 + 6);
    uint32_t r13 = arg1[2];
    
    if (r14 > 0x400 || r13 > 0x640)
        return printf("Wrong image size! (%dx%d)\n", r14, r13);
    
    if (*(arg1 + 0xe))
    {
        int32_t rbx_1 = 0;
        int16_t* r12_2 = *arg1 + data_405120;
        
        do
        {
            sub_4021a0(arg1[1] + rbx_1);
            *stpcpy(&data_538c60, &data_538b20) = 0x2f;
            sprintf(&s, "chr_%s_%c.png", r15, rbx_1 + 0x30);
            strcat(&data_538c60, &s);
            int32_t var_cc_1;
            int32_t rcx_2;
            void var_bc;
            
            if (*(arg1 + 0xf) >= 0)
            {
                rcx_2 = 0;
                var_cc_1 = sub_4016b0(r12_2, &data_405140, &var_bc, r14, r13, 0, r15, 0);
            }
            else
            {
                rcx_2 = 1;
                var_cc_1 = sub_4016b0(r12_2, &data_405140, &var_bc, r14, r13, 1, r15, 0);
            }
            rbx_1 += 1;
            sub_401e40(&data_538c60, r14, r13, rcx_2, &data_405140);
            r12_2 += var_cc_1;
            result = *(arg1 + 0xe);
        } while (result > rbx_1);
    }
    
    return result;
}

int64_t sub_402370(int32_t* arg1, char* arg2, int64_t arg3, int32_t arg4)
{
    uint32_t r14 = *(arg1 + 6);
    uint32_t r13 = arg1[2];
    int16_t* r12_1 = *arg1 + data_405120;
    
    if (r14 > 0x400 || r13 > 0x640)
        return printf("Wrong image size! (%dx%d)\n", r14, r13);
    
    int32_t var_2c;
    
    if (arg4)
    {
        char* rax_5 = stpcpy(&data_538c60, &data_538b20);
        *rax_5 = 0x2f;
        __builtin_strncpy(stpcpy(&rax_5[1], arg2), ".bin", 5);
        int32_t rax_7 = sub_4021a0(arg1[1]);
        var_2c = rax_7;
        sub_401980(r12_1, rax_7, &data_538c60);
    }
    
    char* rax_1 = stpcpy(&data_538c60, &data_538b20);
    *rax_1 = 0x2f;
    __builtin_strncpy(stpcpy(&rax_1[1], arg2), ".png", 5);
    uint64_t r15;
    
    if (*(arg1 + 0xf) >= 0)
    {
        sub_4016b0(r12_1, &data_405140, &var_2c, r14, r13, 0, r15, 0);
        sub_401e40(&data_538c60, r14, r13, 0, &data_405140);
        return 0;
    }
    
    if (*(arg1 + 0x11) == 6)
        sub_4016b0(r12_1, &data_405140, &var_2c, r14, r13, 1, r15, 0);
    else
        sub_4015d0(r12_1, &data_405140, &var_2c, r14, r13);
    
    return sub_401e40(&data_538c60, r14, r13, 1, &data_405140);
}

char* sub_402520(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4)
{
    char r14 = *(arg1 + 1);
    printf("Block %2d.\n");
    char s_1[0x408];
    sprintf(&s_1, "Block %2d.\n", arg2);
    strncat(data_538c40, &s_1, 0x8000);
    char rdx_1 = *(arg1 + 0xf);
    char s = 0;
    int16_t var_4b0;
    void* const rcx;
    
    switch (rdx_1 & 0x7f)
    {
        case 1:
        {
            int16_t var_4b4;
            var_4b4 = 0;
            s = 0x76657270;
            sub_402370(arg1, &s, r14, 0);
            rdx_1 = *(arg1 + 0xf);
            rcx = "Preview image";
            break;
        }
        case 2:
        {
            sprintf(&s, "background%d", arg2);
            sub_402370(arg1, &s, r14, 0);
            rdx_1 = *(arg1 + 0xf);
            rcx = "Background image";
            break;
        }
        case 3:
        {
            var_4b0 = 0;
            s = 0x72756f685f6d7261;
            sub_402370(arg1, &s, r14, 0);
            rdx_1 = *(arg1 + 0xf);
            rcx = "Arm hour";
            break;
        }
        case 4:
        {
            int16_t var_4b0_4 = 0x6574;
            char var_4ae_2 = 0;
            s = 0x756e696d5f6d7261;
            sub_402370(arg1, &s, r14, 0);
            rdx_1 = *(arg1 + 0xf);
            rcx = "Arm minute";
            break;
        }
        case 5:
        {
            int16_t var_4b0_3 = 0x646e;
            char var_4ae_1 = 0;
            s = 0x6f6365735f6d7261;
            sub_402370(arg1, &s, r14, 0);
            rdx_1 = *(arg1 + 0xf);
            rcx = "Arm second";
            break;
        }
        case 6:
        {
            rcx = "Year";
            break;
        }
        case 7:
        {
            int16_t var_4b4_4 = 0x68;
            s = 0x746e6f4d;
            sub_4021f0(arg1, &s);
            rdx_1 = *(arg1 + 0xf);
            rcx = "Month";
            break;
        }
        case 8:
        {
            rcx = &data_40341e;
            break;
        }
        case 9:
        {
            int16_t var_4b4_2 = 0x73;
            s = 0x72756f68;
            sub_4021f0(arg1, &s);
            rdx_1 = *(arg1 + 0xf);
            rcx = "Hours";
            break;
        }
        case 0xa:
        {
            s = 0x736574756e696d;
            sub_4021f0(arg1, &s);
            rdx_1 = *(arg1 + 0xf);
            rcx = "Minutes";
            break;
        }
        case 0xb:
        {
            s = 0x73646e6f636573;
            sub_4021f0(arg1, &s);
            rdx_1 = *(arg1 + 0xf);
            rcx = "Seconds";
            break;
        }
        case 0xc:
        {
            rcx = "AM/PM";
            break;
        }
        case 0xd:
        {
            rcx = "Day of week";
            break;
        }
        case 0xe:
        {
            int16_t var_4b4_1 = 0x73;
            s = 0x70657473;
            sub_4021f0(arg1, &s);
            rdx_1 = *(arg1 + 0xf);
            rcx = "Steps";
            break;
        }
        case 0xf:
        {
            rcx = "Pulse";
            break;
        }
        case 0x10:
        {
            rcx = "Calory";
            break;
        }
        case 0x11:
        {
            rcx = "Distance";
            break;
        }
        case 0x12:
        {
            rcx = "Battery";
            break;
        }
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x19:
        case 0x1a:
        case 0x1b:
        case 0x1c:
        case 0x1d:
        case 0x1e:
        case 0x1f:
        {
            rcx = "Unknown ???";
            break;
        }
        case 0x16:
        {
            s = 0x79676962;
            int16_t var_4b4_3 = 0x6f;
            sub_402370(arg1, &s, r14, 0);
            rdx_1 = *(arg1 + 0xf);
            rcx = "axle pawl";
            break;
        }
        case 0x17:
        {
            var_4b0 = 0x676e702e;
            rcx = "Animation";
            s = 0x747261706d696e61;
            char var_4ac_1 = 0;
            break;
        }
        case 0x18:
        {
            s = 0x79726574746162;
            sub_4021f0(arg1, &s);
            rdx_1 = *(arg1 + 0xf);
            rcx = "Battery strip";
            break;
        }
        case 0x27:
        {
            s = 0x69482072756f68;
            sub_4021f0(arg1, &s);
            rdx_1 = *(arg1 + 0xf);
            rcx = "HoursHi";
            break;
        }
        case 0x28:
        {
            s = 0x6f4c2072756f68;
            sub_4021f0(arg1, &s);
            rdx_1 = *(arg1 + 0xf);
            rcx = "HoursLo";
            break;
        }
        case 0x29:
        {
            int16_t var_4b0_2 = 0x69;
            s = 0x48206574756e696d;
            sub_4021f0(arg1, &s);
            rdx_1 = *(arg1 + 0xf);
            rcx = "MinuteHi";
            break;
        }
        case 0x2a:
        {
            int16_t var_4b0_1 = 0x6f;
            s = 0x4c206574756e696d;
            sub_4021f0(arg1, &s);
            rdx_1 = *(arg1 + 0xf);
            rcx = "MinuteLo";
            break;
        }
        default:
        {
            rcx = "Unknown ?????";
        }
    }
    
    char const* const r8_1 = "RGBA";
    
    if (rdx_1 >= 0)
        r8_1 = &data_4032bf;
    
    sprintf(&s_1, "    0x%02X type: %s %4s (%s)\n", rdx_1, rcx, r8_1, &s);
    printf("%s", &s_1);
    strncat(data_538c40, &s_1, 0x8000);
    int32_t rdx_2 = *arg1;
    sprintf(&s_1, "    0x%08X    (%7u) picture addr…", rdx_2, rdx_2);
    printf("%s", &s_1);
    strncat(data_538c40, &s_1, 0x8000);
    sprintf(&s_1, "    0x%02X,0x%02X     (%3u,%3u) …", arg1[1]);
    printf("%s", &s_1);
    strncat(data_538c40, &s_1, 0x8000);
    sprintf(&s_1, "    0x%04X,0x%04X (%3u,%3u) sx,s…", *(arg1 + 6));
    printf("%s", &s_1);
    strncat(data_538c40, &s_1, 0x8000);
    sprintf(&s_1, "    0x%04X,0x%04X (%3u,%3u) posX…", *(arg1 + 0xa));
    printf("%s", &s_1);
    strncat(data_538c40, &s_1, 0x8000);
    sprintf(&s_1, "    0x%02X,0x%02X     (%3u,%3u) …", *(arg1 + 0xe));
    printf("%s", &s_1);
    strncat(data_538c40, &s_1, 0x8000);
    uint64_t var_4c0 = *(arg1 + 0x13);
    uint64_t var_4c8 = *(arg1 + 0x12);
    uint64_t var_4d0 = *(arg1 + 0x11);
    uint64_t var_4d8 = arg1[4];
    sprintf(&s_1, "    0x%02X,0x%02X,0x%02X,0x%02X …");
    printf("%s", &s_1);
    return strncat(data_538c40, &s_1, 0x8000);
}

int64_t sub_402cc0(int32_t arg1)
{
    uint32_t rbp = **&data_405120;
    printf("----------- %s -----------\n", data_538c20);
    char* rax_2 = malloc(0x8000);
    data_538c40 = rax_2;
    
    if (!rax_2)
        return puts("stxt malloc error!");
    
    uint32_t rdx_1 = data_538d5a;
    *rax_2 = 0;
    char s[0x400];
    sprintf(&s, "Number of block = %d , (0x%04X)\n", rdx_1, rdx_1);
    printf("%s", &s);
    strncat(data_538c40, &s, 0x8000);
    sprintf(&s, "Size of pltable = %d , (0x%04X)\n", rbp, rbp);
    printf("%s", &s);
    strncat(data_538c40, &s, 0x8000);
    sub_402070(0, rbp);
    sub_402070(1, rbp);
    uint32_t rcx_3 = data_538d5a;
    
    if (rcx_3)
    {
        int64_t rbp_1 = 4;
        int32_t rbx_1 = 0;
        
        do
        {
            rbx_1 += 1;
            int32_t* rdi_5 = data_405120 + rbp_1;
            rbp_1 += 0x14;
            sub_402520(rdi_5, rbx_1, arg1, rcx_3);
            rcx_3 = data_538d5a;
        } while (rbx_1 < rcx_3);
    }
    
    char* rax_7 = stpcpy(&data_538c60, &data_538b20);
    int64_t var_458;
    __builtin_strcpy(&var_458, "block_all.txt");
    *rax_7 = 0x2f;
    __builtin_strcpy(&rax_7[1], "block_all.txt");
    FILE* fp = fopen(&data_538c60, "wb");
    char* buf = data_538c40;
    fwrite(buf, strlen(buf), 1, fp);
    fclose(fp);
    return free(data_538c40);
}

uint64_t sub_402e90(int32_t arg1)
{
    uint32_t rcx_1 = arg1 >> 0x1f >> 0x1e;
    int32_t rdx_2 = ((arg1 + rcx_1) & 3) - rcx_1;
    
    if (rdx_2 <= 0)
        return arg1;
    
    printf("align %d to %d\n", arg1, arg1 - rdx_2 + 4);
    return arg1 - rdx_2 + 4;
}

void init()
{
    _init();
    int64_t i = 0;
    
    do
    {
        int64_t rdx;
        int64_t rsi;
        int32_t rdi;
        (&init_array)[i](rdi, rsi, rdx);
        i += 1;
    } while (1 != i);
}

void fini() __pure
{
    return;
}

int64_t _fini() __pure
{
    return;
}

